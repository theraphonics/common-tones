(defmacro ppolar-bb1 (r freq) `(- (* 2.0 ,r (cos (hz->radians ,freq)))))
(defmacro ppolar-bb2 (r) `(* ,r ,r))

(defparameter sine (make-double-array 256 :initial-contents '(0.0 0.024541229 0.049067676 0.07356457 0.09801714 0.12241068 0.14673047 0.17096189 0.19509031 0.21910122 0.24298017 0.26671275 0.29028466 0.31368175 0.33688986 0.35989505 0.38268346 0.40524137 0.42755514 0.4496114 0.4713968 0.4928983 0.5141028 0.5349977 0.5555703 0.5758083 0.5956994 0.6152317 0.6343934 0.65317297 0.6715591 0.6895407 0.70710695 0.7242472 0.7409513 0.757209 0.7730106 0.7883466 0.8032077 0.817585 0.8314698 0.8448537 0.8577287 0.870087 0.8819213 0.8932243 0.9039893 0.9142097 0.9238795 0.93299276 0.941544 0.9495281 0.95694023 0.963776 0.97003114 0.97570205 0.9807852 0.98527753 0.9891764 0.99247944 0.99518466 0.9972904 0.9987954 0.9996988 1.0 0.9996988 0.9987955 0.99729055 0.99518484 0.9924797 0.9891767 0.98527783 0.98078555 0.9757024 0.9700316 0.96377647 0.95694077 0.9495287 0.9415446 0.9329934 0.92388016 0.91421044 0.90399003 0.893225 0.881922 0.87008774 0.8577293 0.8448543 0.8314703 0.8175855 0.80320823 0.78834707 0.7730111 0.7572094 0.7409517 0.72424763 0.7071073 0.689541 0.6715594 0.6531732 0.63439363 0.6152319 0.59569955 0.57580835 0.55557036 0.5349977 0.51410276 0.49289814 0.47139663 0.44961116 0.42755485 0.405241 0.38268307 0.3598946 0.33688936 0.31368116 0.29028404 0.26671204 0.24297938 0.21910037 0.19508938 0.17096087 0.14672938 0.122409515 0.098015904 0.073563255 0.049066298 0.02453978 0.0 -0.024542816 -0.04906933 -0.07356629 -0.09801893 -0.122412525 -0.14673239 -0.17096387 -0.19509235 -0.21910334 -0.24298233 -0.26671496 -0.29028693 -0.31368405 -0.3368922 -0.35989743 -0.38268587 -0.40524378 -0.4275576 -0.44961387 -0.4713993 -0.4929008 -0.5141054 -0.53500026 -0.55557287 -0.57581085 -0.595702 -0.61523426 -0.63439596 -0.65317553 -0.6715616 -0.6895432 -0.70710945 -0.7242497 -0.74095374 -0.75721127 -0.7730129 -0.7883488 -0.80320984 -0.81758714 -0.83147186 -0.8448558 -0.85773075 -0.8700891 -0.8819233 -0.89322627 -0.9039912 -0.9142116 -0.9238813 -0.9329945 -0.94154567 -0.9495297 -0.9569418 -0.96377736 -0.97003245 -0.97570324 -0.98078626 -0.98527855 -0.9891773 -0.9924802 -0.99518526 -0.99729085 -0.99879575 -0.99969894 -1.0 -0.9996987 -0.99879515 -0.99729 -0.9951841 -0.9924788 -0.9891756 -0.9852766 -0.98078406 -0.97570074 -0.9700297 -0.9637743 -0.95693845 -0.9495261 -0.9415418 -0.9329904 -0.92387694 -0.914207 -0.90398633 -0.89322114 -0.8819179 -0.87008345 -0.85772485 -0.84484965 -0.8314655 -0.8175805 -0.80320305 -0.78834176 -0.7730056 -0.75720376 -0.7409459 -0.7242416 -0.70710117 -0.6895347 -0.67155296 -0.65316665 -0.6343869 -0.615225 -0.5956926 -0.5758013 -0.55556315 -0.5349904 -0.5140953 -0.4928906 -0.47138897 -0.4496034 -0.427547 -0.4052331 -0.38267505 -0.3598865 -0.3368812 -0.31367293 -0.29027572 -0.26670367 -0.24297097 -0.2190919 -0.19508088 -0.17095234 -0.14672081 -0.12240091 -0.09800728 -0.07355461 -0.049057636 -0.024531113)))

(defparameter cose (make-double-array 256 :initial-contents '(1.0 0.9996988 0.99879545 0.99729043 0.9951847 0.99247956 0.9891765 0.98527765 0.9807853 0.9757021 0.97003126 0.96377605 0.95694035 0.94952816 0.94154406 0.9329928 0.9238795 0.9142097 0.90398926 0.8932243 0.88192123 0.87008697 0.85772854 0.8448535 0.83146954 0.81758475 0.80320746 0.78834635 0.7730104 0.75720876 0.740951 0.724247 0.70710665 0.6895404 0.6715588 0.6531727 0.6343931 0.6152314 0.5956991 0.575808 0.55557 0.5349974 0.5141026 0.49289808 0.47139665 0.4496113 0.4275551 0.40524137 0.38268355 0.3598952 0.33689004 0.313682 0.290285 0.2667131 0.24298058 0.2191017 0.19509083 0.17096244 0.14673108 0.12241133 0.09801785 0.07356532 0.049068484 0.024542088 0.0 -0.02454027 -0.049066667 -0.07356351 -0.09801604 -0.12240952 -0.14672928 -0.17096065 -0.19508904 -0.21909992 -0.24297881 -0.26671135 -0.29028323 -0.31368026 -0.33688834 -0.3598935 -0.38268185 -0.4052397 -0.42755356 -0.44960988 -0.47139537 -0.4928969 -0.51410156 -0.5349965 -0.5555692 -0.5758072 -0.5956984 -0.61523074 -0.6343925 -0.65317214 -0.6715583 -0.68953997 -0.7071063 -0.7242466 -0.74095076 -0.7572085 -0.7730102 -0.78834623 -0.80320734 -0.8175847 -0.83146954 -0.8448535 -0.8577286 -0.870087 -0.88192135 -0.8932244 -0.90398943 -0.9142099 -0.9238797 -0.932993 -0.94154423 -0.9495284 -0.95694053 -0.9637763 -0.97003144 -0.97570235 -0.9807855 -0.98527783 -0.9891767 -0.9924797 -0.99518484 -0.99729055 -0.9987955 -0.9996989 -1.0 -0.99969876 -0.9987954 -0.9972903 -0.99518454 -0.9924793 -0.9891762 -0.9852773 -0.9807849 -0.9757017 -0.9700307 -0.96377546 -0.95693964 -0.94952744 -0.9415432 -0.93299186 -0.92387855 -0.91420865 -0.9039881 -0.89322305 -0.8819199 -0.87008554 -0.85772705 -0.8448519 -0.83146787 -0.81758296 -0.80320555 -0.7883443 -0.7730082 -0.75720656 -0.7409487 -0.72424453 -0.70710415 -0.68953776 -0.67155606 -0.65317005 -0.63439035 -0.61522853 -0.59569615 -0.57580495 -0.55556685 -0.5349941 -0.5140991 -0.49289447 -0.4713929 -0.4496074 -0.42755103 -0.40523717 -0.38267916 -0.35989067 -0.33688536 -0.31367716 -0.29027998 -0.26670796 -0.2429753 -0.21909626 -0.19508524 -0.17095672 -0.14672522 -0.12240533 -0.09801171 -0.07355905 -0.049062088 -0.024535567 0.0 0.024547031 0.04907354 0.07357049 0.098023124 0.12241671 0.14673656 0.17096801 0.1950965 0.21910745 0.24298641 0.266719 0.29029095 0.31368804 0.33689618 0.35990137 0.38268974 0.40524763 0.4275614 0.44961762 0.47140303 0.49290445 0.51410896 0.53500384 0.5555764 0.5758143 0.5957054 0.6152376 0.63439924 0.6531787 0.67156476 0.6895463 0.70711243 0.72425264 0.74095654 0.7572142 0.7730157 0.78835154 0.8032125 0.8175897 0.83147436 0.84485817 0.8577331 0.8700913 0.8819254 0.8932283 0.9039931 0.9142134 0.923883 0.9329961 0.94154716 0.9495311 0.95694304 0.96377856 0.9700336 0.97570425 0.98078716 0.9852793 0.98917794 0.99248075 0.9951857 0.9972912 0.9987959 0.99969906)))

(defparameter wenv (mapcar #'(lambda (x) (double x)) '(0.0 5.9968793e-5 0.032258064 6.564688e-4 0.06451613 0.003059166 0.09677419 0.009095865 0.12903225 0.02173582 0.16129032 0.04486067 0.19354838 0.08278035 0.22580644 0.13945268 0.2580645 0.21746996 0.29032257 0.3169958 0.32258064 0.43491945 0.3548387 0.5645082 0.38709676 0.6957641 0.41935483 0.81653523 0.4516129 0.914241 0.48387095 0.97789496 0.516129 1.0 0.5483871 0.9778948 0.58064514 0.9142407 0.61290324 0.81653476 0.6451613 0.69576377 0.67741936 0.5645078 0.7096774 0.43491903 0.7419355 0.31699538 0.7741935 0.21746954 0.8064516 0.13945234 0.83870965 0.08278009 0.87096775 0.044860452 0.9032258 0.021735702 0.9354839 0.009095783 0.9677419 0.003059104 1.0 6.564576e-4)))


(definstrument granular
  (beg ngrain file &key (sine sine) (cose cose) (maxsize .5) (amp 1) (ampenv '(0 1 1 1)) (base-amp 1)
       (wnd1 wenv) (wbase1 1) (wnd2 wenv) (wbase2 1) (wndSiz 32) (interp-env '(0 0 1 1)) (base-intp 1)
       (frqns (list 262.0)) (dirct '(1)) (posit '(0)) (frame '(.1)) (hopev '(.1))
       (Rs '(0)) (Fs '(440)) (Gs '(1)) (coord '(0 1)) (rev-amount .01))
  (let* ((f        (open-input file))
         (ngrain1  (1- ngrain))
	 (buffsize (floor (* maxsize *srate*)))
	 (incs     '(2 1 1 1 1 1 1 1 1))
	 (sz-vars  (length incs))
	 (leng     (list (length coord) (length frame) (length Gs) (length frqns)
	                 (length dirct) (length posit) (length hopev) (length Rs) (length Fs)))
	 (cnt      (make-array sz-vars :initial-element 0))
	 (inc      (make-array sz-vars :initial-contents incs))
	 (lim      (make-array sz-vars :initial-contents (mapcar #'(lambda (x y) (- x y)) leng incs)))
	 (dur      (+ (loop for i below ngrain1 sum (nth (mod i (nth 6 leng)) hopev))
		      (nth (mod ngrain1 (nth 1 leng)) frame)))
	 (st       (floor (* beg *srate*)))
	 (nd       (+ st (floor (* dur *srate*))))
	 (window1  (make-array wndSiz))
	 (window2  (make-array wndSiz))
	 (bufferA  (make-array buffsize :initial-element .0))
	 (bufferB  (make-array buffsize :initial-element .0))
	 (coords   (make-array (nth 0 leng) :initial-contents coord))
	 (wsize    (make-array (nth 1 leng) :initial-contents 
	                 (mapcar #'(lambda (x) (* *srate* x)) frame)))
	 (envel    (make-array (nth 2 leng) :initial-contents Gs))
	 (senv     (make-array (nth 3 leng) :initial-contents 
	                 (mapcar #'(lambda (x) (1- (* 0.0038222566 x))) frqns)))
	 (direnv   (make-array (nth 4 leng) :initial-contents dirct))
	 (posv     (make-array (nth 5 leng) :initial-contents 
	                 (mapcar #'(lambda (x) (* (sound-framples file) x)) posit)))
	 (hopv     (make-array (nth 6 leng) :initial-contents 
	                 (mapcar #'(lambda (x) (* *srate* x)) hopev)))
	 (RRs      (make-array (nth 7 leng) :initial-contents Rs))
	 (FFs      (make-array (nth 8 leng) :initial-contents Fs))
	 (wind1ev  (make-env :envelope wnd1 :end wndSiz :base wbase1))
	 (wind2ev  (make-env :envelope wnd2 :end wndSiz :base wbase2))
	 (interp   (make-env :envelope interp-env :end ngrain :base base-intp))
	 (amplt    (make-env :envelope ampenv :scaler amp :end ngrain :base base-amp))
	 (srca-input (make-readin f))
	 (srca     (make-src :srate 1.0))
         (pps      (make-two-pole :radius 0.0 :frequency 1000.0))
	 (pointer 0) (intp1 0) (intp2 0) (in-sig 0) (hop 0) 
	 (size 0) (factor 0) (winintr 0) (ampl 0) (frqn 0)
	 (degree 0) (distance 0) (ascl 0) (bscl 0) (rscl 0) (R0 0) (F0 0))
    (loop for i below wndSiz do
      (setf (aref window1 i) (env wind1ev))
      (setf (aref window2 i) (env wind2ev)))
    (run
     (loop for i from st below nd do
	   (when (>= pointer hop)
	     (decf ngrain)
	     (setf degree   (* 40.743664 (- 2.3561945 (atan 1 (aref coords (aref cnt 0))))) 
		   distance (* .5 (+ 1 (aref coords (+ 1 (aref cnt 0)))))
		   ascl (* distance (array-interp sine degree))
		   bscl (* distance (array-interp cose degree))
		   rscl (* rev-amount (/ 1.0 (sqrt distance)))
		   (mus-location srca-input) (floor (aref posv (aref cnt 5)))
		   (mus-increment srca) (floor (aref direnv (aref cnt 4)))
		   ampl (* (env amplt) (aref envel (aref cnt 2)))
		   frqn (aref senv (aref cnt 3))
		   size (floor (aref wsize (aref cnt 1)))
		   factor (/ wndSiz size)
		   intp1 (env interp) 
		   intp2 (- 1 intp1)
	           R0 (aref RRs (aref cnt 7))
	           F0 (aref FFs (aref cnt 8))
	           (mus-ycoeff pps 1) (ppolar-bb1 R0 F0)
	           (mus-ycoeff pps 2) (ppolar-bb2 R0))
	     (do ((k 0 (1+ k))
		  (j hop (1+ j)))
		 ((= k size))
		   (setf winintr (* k factor)
			 in-sig (* ampl (two-pole pps (src srca frqn #'(lambda (dir)
									 (readin srca-input))))
					(+ (* intp2 (array-interp window1 winintr))
					   (* intp1 (array-interp window2 winintr)))))
		   (setf (aref bufferA k) (+ (aref bufferA j) (* ascl in-sig))
			 (aref bufferB k) (+ (aref bufferB j) (* bscl in-sig))))	
	     (setf pointer 0 hop (floor (aref hopv (aref cnt 6))))
	     (do ((i 0 (1+ i)))
		 ((= i sz-vars))
	       (if (= (aref cnt i) (aref lim i)) (setf (aref cnt i) 0) (incf (aref cnt i) (aref inc i)))))
	   (outa i (aref bufferA pointer))
	   (outb i (aref bufferB pointer))
	   (if *reverb* (outa i (* (aref bufferA pointer) rscl) *reverb*))
	   (if (= ngrain 0) (setf i nd))
	   (incf pointer)))
    (close-input f)))

(defun time-grain (ngrn env base)
  (let* ((sum 0) (a (make-env :envelope env :end ngrn :base base)))
    (loop for i from 0 below ngrn do (incf sum (env a))) sum))



#|
(time-grain 100 '(0 .1 1 .01) 1)
(let* ((ngrn 6) (last 0) (sum 0)
       (frqns (make-env :envelope (list 0 520.0 1 520.0) :end ngrn :base 1))
       (posit (make-env :envelope '(0 .0 1 .0) :end ngrn :base 1))
       (frame (make-env :envelope '(0 .4 1 .4) :end ngrn :base 1))
       (hopev (make-env :envelope '(0 .2 1 .2) :end ngrn :base 1))
       (tline (sort (loop for i below ngrn collect (incf sum (env hopev))) '<)))
  (with-sound (:srate 22050 :channels 2 :statistics t)
    (granular 0 ngrn "oboe.snd" :amp 1 :ampenv '(0 1 1 1) :maxsize .7
      :wnd1 '(0 0 .1 1 1 0) :wbase1 1 :wnd2 '(0 0 .1 1 1 0) :wbase2 25 :wndSiz 32
      :interp-env '(0 0 1 1) :base-intp 1 :Gs '(1) :dirct '(1) 
      :coord '(.2 .2 -.2 .9 -.2 .2 .2 .9)
      :frqns (loop for i below ngrn collect (env frqns))
      :posit (loop for i below ngrn collect (env posit))
      :frame (loop for i below ngrn collect (env frame))
      :hopev (loop for i in tline collect (- i last) do (setf last i)))))
|#
