;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;   leslie.ins
;;
;;   Time varying delay-lines
;;   ========================
;;   Doppler shift for Leslie
;;
;;   Based on: 
;;             Abel, Berners, Serafin, Smith J.O 
;;             "Doppler Simulation and the Leslie",
;;             Proc. of  DAFx-02, September, 2002
;;
;;             Thanks to Patty Huang
;; 
;; 
;;   Syntax: CLM-4, S7
;;                 
;;
;;                 juanig@ccrma
;;
;;
;;   NOTES:  
;;   Get Leslie effect on a pulse-train waveshape. Try acceleration with the vel-envelope.
;;   It can also be used to apply a Leslie effect to a soundfile. Just switch to the 
;;   'make-readin', readin ug.
;;
;;   First version: Sat 20 Mar 2004 11:22:47 AM PST
;;   Last update:   Wed 13 Nov 2019 04:13:30 PM PST
;;
;;   History:
;;   06/20/2014  fixed delays and delay lines length
;;   09/10/2014  added reflection delay lines
;;   09/12/2014  added lowport baffle section 
;;   09/18/2014  S7 .cms version
;;   11/13/2019  Fixed delay line lengths and added a two-pole for the baffle part.
;;               Removed butterworth in exchange for a two-pole frequency shifting.
;;               Tested on CLM-5.
;;      
;;
;;

(defparameter sspeed 345.12)  ;; Velocity of sound
(defparameter twopi (* 2 pi))
(defparameter oneturn (* pi 2))

;;
;;;
;;
(definstrument rotates (start dur freq  &key
				(speedsl 3.33)          ;; Speed source listener mts/sec
				(velenv '(0 1 100 1))   ;; Velocity envelope
				(gain 0.35)             ;; scales output
				;; (onset 0.0)          ;; onset values in case of reading a soundfile
				(rev-amount 0.025))     ;; very short reverb
  
  (let* ((sig (make-pulse-train :frequency freq))
	 ;;; (rdA (make-readin :file file                        ;; just in case you want to read 
	 ;;;	               :start (seconds->samples onset))  ;; a soundfile  instead
	 ;;;
	 (maxddelayl (if (= *srate* 44100) (values 160)    
			 (values 192)))
	 (startddelay (if (= *srate* 44100) (values 48)   ;; 48 
			  (values 52)))
	 (m2samp (/ *srate* sspeed))
	 (vel-env (make-env velenv  :duration (* dur 0.5)))
	 ;;;
	 ;;; Doppler delay lines
	 ;;;
	 (dpdelays (make-array 4))
	 (dshift (make-array 4 :initial-element startddelay))
	 ;;
	 ;;;
	 ;;; Reflection path delay arrays
	 ;;;
	 (refldelays (make-array 4))
	 (reflectlen (make-array 4))
	 (reflections (make-array 4 :initial-element 0.0))
	 (hornout (make-array 4 :initial-element 0.0))
	 ;;
	 ;;  Lowpass (baffle) 'frequency shift' array
	 ;;
	 (fshift  (make-array 4))
	 (baffleout (make-array 4))
	 ;;
	 (lpf (make-array 4))
	 ;;
	 (growf0 0.0)
	 (growf1 0.0)
	 (growfa 0.0)
	 (growfb 0.0)
	 ;;
	 (hornangvel 1.0)
	 (baffleangvel 1.0)
	 (hornangle 0.0)
	 (hornradius 0.18)
	 (baffleangle 0.0)
	 (baffleradius 0.19050)
	 ;;
	 (xdev 0.0)
	 (ydev 0.0)
	 (cabinetlen 0.71)
	 (cabinetwid 0.52)   
	 ;;
	 )
    ;;
    ;; Make delays 
    ;;
    (dotimes (i 4)
      (setf (aref dpdelays i) (make-delay :size startddelay 
					  :max-size maxddelayl 
					  :type  mus-interp-linear))
      (setf (aref refldelays i) (make-delay :size startddelay
					    :max-size (ceiling (* cabinetlen 2 m2samp))
				 ))
      )
    ;;
    ;; Make filters
    ;;
    (dotimes (i 4)
      (setf (aref lpf i) (make-two-pole :a0 0.304 :b1 0.62986 :b2 0.825))
      )
    
    ;;
    ;;
    (multiple-value-bind (beg end) (times->samples start dur)
      ;;;
      ;;;
      (Run
       (loop for i from beg to end do
	    (let ((sample (pulse-train sig))
		  ;;;  (sample (readin rdA))  switch in case of reading a soundfile
		  (deltavel (env vel-env))
		  (sigouta 0.0) (sigoutb 0.0)  ;; horn
		  (sigoutc 0.0) (sigoutd 0.0)  ;; reflections
		  (woofera 0.0) (wooferb 0.0)  ;; low baffle output
		  )
	      ;;
	      ;;; set acceleration of horn
	      ;;
	      (setf hornangvel (* speedsl deltavel))
	      (incf hornangle (* twopi (/ hornangvel *srate*)))
	      ;;
	      ;;; set motion parameters for baffle lower port
	      ;; 
	      (setf baffleangvel (* 0.895 speedsl ))
	      (incf baffleangle (* twopi (/ baffleangvel *srate*)))
	      ;;
	      (if (> hornangle twopi) (decf hornangle twopi))
	      (if (> baffleangle twopi) (decf baffleangle twopi))
	      ;;
	      ;;;  calculate grow functions for delay line size (horn Doppler shifts)
	      ;;
	      (setf growf0 (/ (*(* (- twopi) hornradius) (* hornangvel (cos hornangle))) sspeed))
	      (setf growf1 (/ (*(* (- twopi) hornradius) (* hornangvel (sin hornangle))) sspeed))
	      ;;
	      (decf (aref dshift 0) growf0)
	      (decf (aref dshift 1) growf1)
	      (decf (aref dshift 2) (- growf0))
	      (decf (aref dshift 3) (- growf1))
	      ;;
	      (dotimes (j 4)
		(setf (aref hornout j ) (delay (aref dpdelays j) sample (aref dshift j)))
		)
	      ;;
	      ;;; Reflections
	      ;; 
	      (setf xdev (* hornradius (cos hornangle)))
	      (setf ydev (* hornradius (sin hornangle)))
	      (setf (aref reflectlen 0) (* (+ (/ cabinetwid 2) ydev) m2samp))
	      (setf (aref reflectlen 1) (* (- cabinetlen xdev) m2samp))
	      (setf (aref reflectlen 2) (* 1.5 (- cabinetwid ydev) m2samp))
	      (setf (aref reflectlen 3) (* (+ cabinetlen xdev) m2samp))
	      ;;
	      ;;;  Need to add these reflections to *reverb*
	      ;;
	      (dotimes (j 4)                             
		(setf (aref reflections j) (delay (aref refldelays j)  
					    (aref hornout j) 
					    (aref reflectlen j))) )
	      ;; 
	      (setf sigouta (+ (aref hornout 0) (aref hornout 2)))
	      (setf sigoutb (+ (aref hornout 1) (aref hornout 3)))
	      (setf sigoutc (+ (aref reflections 0) (aref reflections 2)))
	      (setf sigoutd (+ (aref reflections 1) (aref reflections 3)))
	      ;;
	      ;;; Grow functions baffle low port section
	      ;;
	      (setf growfa (* (- twopi) baffleradius baffleangvel (cos baffleangle)))
	      (setf growfb (* (- twopi) baffleradius baffleangvel (sin baffleangle)))
	      ;;
	      (setf (aref fshift 0) (+ 200 (* growfa 250)))
	      (setf (aref fshift 1) (+ 200 (* growfb 250)))
	      (setf (aref fshift 2) (+ 225 (* (- growfa) 250)))
	      (setf (aref fshift 3) (+ 225 (* (- growfb) 250)))
	      ;;
	      ;;; Filter for baffle low port section
	      ;;
	      (dotimes (k 4)
		(setf (mus-frequency (aref lpf k)) (aref fshift k))
		(setf (mus-scaler (aref lpf k)) 0.938987)
		) 
	      ;;
	      ;;
	      (dotimes (k 4)
		(setf (aref baffleout k) (two-pole (aref lpf k) sample)) )		
	      ;;
	      ;;
	      (setf woofera (* 0.165 (+ (aref baffleout 0) (aref baffleout 2))))
	      (setf wooferb (* 0.165 (+ (aref baffleout 1) (aref baffleout 3))))
	      ;;
	      (outa i (* gain (+ sigouta sigoutc woofera))) 
	      (outb i (* gain (+ sigoutb sigoutd wooferb)))
	      ;;;
	      (if *reverb*
		  (progn
		    (outa i (* (* 0.5 gain)  (+ sigoutc woofera) rev-amount) *reverb*) 
		    (outb i (* (* 0.5 gain)  (+ sigoutd wooferb) rev-amount) *reverb*) )) 
	      ))))

       ))

;;; (with-sound (:channels 2)  (rotates 0 1 800))
;;; (with-sound (:channels 2)  (rotates 0 3 200))
;;; (with-sound (:channels 2)  (rotates 0 8 300 :speedsl 1.0))
;;; (with-sound (:channels 2)  (rotates 0 3 500 :speedsl 1.0))
;;; (with-sound (:channels 2)  (rotates 0 3 800 :velenv '(0 0.05 100 1)))
;;; (with-sound (:channels 2)  (rotates 0 3 500 :velenv '(0 1 100 0.25)))
;;; (with-sound (:channels 2)  (rotates 0 5 1000 :velenv '(0 0.25 50 1 100 0.3)))


;;; (compile-file "nrev.ins") (load "nrev.ins")

;;; (with-sound (:channels 2 :reverb nrev :reverb-channels 2)  (rotates 0 5 500 :velenv '(0 1 100 0.25)))

