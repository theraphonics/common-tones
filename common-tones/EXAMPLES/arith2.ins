(definstrument arith2 ()
  (let ((val 1)
	(ival 2)
	(fval 3.0)
	(gval 4.0)
	(hi 0)
	(ha (make-array 10))
	(ho 0.0)
	(a_int 1)
	(a_real 1.0)
	(a_arr (make-array 3 :initial-contents '(1 3 3.0)))
	(b_int 3)
	(b_real 3.0)
	(a_any 1)
	(b_any 3))
    (setf (aref ha 2) 1.0)
    (run
     (loop for i from 0 below 1 do
       (declare (type integer ival a_int) (type float fval a_real))
       (setf val (- val))                   (if (not (and (integerp val) (= val -1))) (print "1"))
       (setf ival (- ival))                 (if (not (and (integerp ival) (= ival -2))) (print "2"))
       (setf fval (- fval))                 (if (not (and (floatp fval) (= fval -3.0))) (print "3"))
       (setf gval (- gval))                 (if (not (and (floatp gval) (= gval -4.0))) (print "4"))
       (setf hi (- 5))                      (if (not (and (integerp hi) (= hi -5))) (print "5"))
       (setf ho (- (aref ha 2)))            (if (not (and (floatp ho) (= ho -1.0))) (print "6"))
       (setf (aref ha 3) (+ 3 2))           (if (not (and (integerp (aref ha 3)) (= (aref ha 3) 5))) (print "7"))
       (setf (aref ha 4) (+ 3.1 ival))      (if (not (and (floatp (aref ha 4)) (= (aref ha 4) 1.1))) (print "8"))
       (setf (aref ha 5) (+ ival hi))       (if (not (and (integerp (aref ha 5)) (= (aref ha 5) -7))) (print "9"))
       (setf (aref ha 6) (+ ival fval 3))   (if (not (and (floatp (aref ha 6)) (= (aref ha 6) -2.0))) (clm-print "10: ~F " (aref ha 6)))
       (setf (aref ha 7) (+ fval ho))
       (setf (aref ha 8) (+ ival 3 hi val)) (if (not (and (integerp (aref ha 8)) (= (aref ha 8) -5))) (print "12"))
       (setf val 0)
       (dotimes (k 3) (incf val))
       (if (not (and (integerp val) (= val 3))) (print "14"))

       (setf val 1)
       (setf ival 13)
       (setf fval -13.4)
       (setf gval 13.4)
       (setf hi -4)
       (setf ho -13)
       (setf (aref ha 1) 1)
       (setf (aref ha 2) 13)
       (setf (aref ha 3) 4)
       (setf (aref ha 4) -13)
       (setf (aref ha 5) -4)
       (setf (aref ha 6) 13.4)

       (setf val (mod 13 4)) (if (/= val 1) (clm-print "(mod 13 4): ~D~%" val))
       (setf val (mod -13 4)) (if (/= val 3) (clm-print "(mod -13 4): ~D~%" val))
       (setf val (mod 13 -4)) (if (/= val -3) (clm-print "(mod 13 -4): ~D~%" val))
       (setf val (mod -13 -4)) (if (/= val -1) (clm-print "(mod -13 -4): ~D~%" val))
       (setf val (mod 13.4 1)) (if (> (abs (- val 0.4)) .0001) (clm-print "(mod 13.4 1): ~F~%" val))
       (setf val (mod -13.4 1)) (if (> (abs (- val 0.6)) .0001) (clm-print "(mod -13.4 1): ~F~%" val))

       (setf val (mod ival 4)) (if (/= val 1) (clm-print "(mod i13 4): ~D~%" val))
       (setf val (mod ho 4)) (if (/= val 3) (clm-print "(mod -i13 4): ~D~%" val))
       (setf val (mod ival -4)) (if (/= val -3) (clm-print "(mod i13 -4): ~D~%" val))
       (setf val (mod ho -4)) (if (/= val -1) (clm-print "(mod -i13 -4): ~D~%" val))
       (setf val (mod gval 1)) (if (> (abs (- val 0.4)) .0001) (clm-print "(mod f13.4 1): ~F~%" val))
       (setf val (mod fval 1)) (if (> (abs (- val 0.6)) .0001) (clm-print "(mod -f13.4 1): ~F~%" val))
       
       (setf val (mod ival (aref ha 3))) (if (/= val 1) (clm-print "(mod i13 a4): ~D~%" val))
       (setf val (mod ho (+ 2 2))) (if (/= val 3) (clm-print "(mod -i13 e4): ~D~%" val))
       (setf val (mod ival hi)) (if (/= val -3) (clm-print "(mod i13 -i4): ~D~%" val))
       (setf val (mod ho hi)) (if (/= val -1) (clm-print "(mod -i13 -i4): ~D~%" val))
       (setf val (mod gval (aref ha 1))) (if (> (abs (- val 0.4)) .0001) (clm-print "(mod f13.4 a1): ~F~%" val))
       (setf val (mod fval (+ hi 5))) (if (> (abs (- val 0.6)) .0001) (clm-print "(mod -f13.4 e1): ~F~%" val))

       (if (> a_int b_int) (print "1"))
       (if (> a_real b_real) (print "2"))
       (if (> a_int (aref a_arr 0)) (print "3"))
       (if (> b_real (aref a_arr 2)) (print "4"))
       (if (> a_int b_real) (print "5"))
       (if (> a_real b_int) (print "6"))
       (setf a_int 3)
       (setf a_real 3.0)
       (setf b_int 1)
       (setf b_real 1.0)
       (if (< a_int b_int) (print "7"))
       (if (< a_real b_real) (print "8"))
       (if (< a_int (aref a_arr 0)) (print "9"))
       (if (> b_real (aref a_arr 2)) (print "10"))
       (if (< a_int b_real) (print "11"))
       (if (< a_real b_int) (print "12"))
       (if (> (abs (- b_real (cos 0.0))) .001) (print "13"))
       (if (> a_any b_any) (print "14"))
       (setf a_any 32.0)
       (if (< a_any b_any) (print "15"))
       (setf b_any 34)
       (if (> a_any b_any) (print "16"))
       (setf b_any 16.0)
       (if (< a_any b_any) (print "17"))
       (setf a_any 12)
       (if (> a_any b_any) (print "16"))

       (outa i (if (= val 1) (progn (if (oddp val) 0.0 .25)) 0.5))))))
