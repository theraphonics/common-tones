(defun bit20 (x)			;modifier got 2's complement 20 bit interpreted as fraction 
  (if (>= x (expt 2 19))
      (float (/ (- x (expt 2 20)) (expt 2 19)))
    (float (/ x (expt 2 19)))))

(defun make-frobber-function (beg end frobl)
  (let ((result (list beg))
	(val (bit20 (cadr frobl))))
    (loop for x in frobl by #'cddr and 
              y in (cdr frobl) by #'cddr do
      (when (and (>= x beg)
		 (<= x end))
	(push val result)
	(push x result)
	(setf val (bit20 y))))
    (push val result)
    (push end result)
    (push val result)
    (nreverse result)))

(defvar vslf-fm-index 1.0)
(defvar vslf-amp-env '(0 0  25 1  75 1  100 0))
(defvar vslf-periodic-vibrato-rate 5.0)
(defvar vslf-random-vibrato-rate 16.0)
(defvar vslf-periodic-vibrato-amplitude 0.0025)
(defvar vslf-random-vibrato-amplitude 0.005)
(defvar vslf-noise-amount 0.0)
(defvar vslf-noise-freq 1000.0)
(defvar vslf-gliss-env '(0 0  100 0))
(defvar vslf-glissando-amount 0.0)
(defvar vslf-fm1-env '(0 1  25 .4  75 .6  100 0))
(defvar vslf-fm2-env vslf-fm1-env)
(defvar vslf-fm3-env vslf-fm1-env)
(defvar vslf-fm1-rat 1.0)
(defvar vslf-fm2-rat 3.0)
(defvar vslf-fm3-rat 4.0)
(defvar vslf-base nil)
(defvar vslf-frobber nil)
(defvar vslf-reverb-amount 0.01)
(defvar vslf-index-type :violin)
(defvar vslf-degree 0.0)
(defvar vslf-distance 1.0)
(defvar vslf-denoise nil)
(defvar vslf-index1 nil)
(defvar vslf-index2 nil)
(defvar vslf-index3 nil)

(defun restore-vslf-defaults ()
  (setf vslf-fm-index 1.0)
  (setf vslf-amp-env '(0 0  25 1  75 1  100 0))
  (setf vslf-periodic-vibrato-rate 5.0)
  (setf vslf-random-vibrato-rate 16.0)
  (setf vslf-periodic-vibrato-amplitude 0.0025)
  (setf vslf-random-vibrato-amplitude 0.005)
  (setf vslf-noise-amount 0.0)
  (setf vslf-noise-freq 1000.0)
  (setf vslf-gliss-env '(0 0  100 0))
  (setf vslf-glissando-amount 0.0)
  (setf vslf-fm1-env '(0 1  25 .4  75 .6  100 0))
  (setf vslf-fm2-env vslf-fm1-env)
  (setf vslf-fm3-env vslf-fm1-env)
  (setf vslf-fm1-rat 1.0)
  (setf vslf-fm2-rat 3.0)
  (setf vslf-fm3-rat 4.0)
  (setf vslf-base nil)
  (setf vslf-frobber nil)
  (setf vslf-reverb-amount 0.01)
  (setf vslf-index-type :violin)
  (setf vslf-denoise nil)
  (setf vslf-index1 nil)
  (setf vslf-index2 nil)
  (setf vslf-index3 nil)
  (setf vslf-degree 0.0)
  (setf vslf-distance 1.0))

(definstrument vslf
	       (startime dur frequency amplitude
		&key (fm-index                   vslf-fm-index)
		     (amp-env                    vslf-amp-env)
		     (periodic-vibrato-rate      vslf-periodic-vibrato-rate)
		     (random-vibrato-rate        vslf-random-vibrato-rate)
		     (periodic-vibrato-amplitude vslf-periodic-vibrato-amplitude)
		     (random-vibrato-amplitude   vslf-random-vibrato-amplitude)
		     (noise-amount               vslf-noise-amount)
		     (noise-freq                 vslf-noise-freq)
		     (gliss-env                  vslf-gliss-env)
		     (glissando-amount           vslf-glissando-amount)
		     (fm1-env                    vslf-fm1-env)
		     (fm2-env                    vslf-fm2-env)
		     (fm3-env                    vslf-fm3-env)
		     (fm1-rat                    vslf-fm1-rat)
		     (fm2-rat                    vslf-fm2-rat)
		     (fm3-rat                    vslf-fm3-rat)
		     (fm1-index                  vslf-index1)
		     (fm2-index                  vslf-index2)
		     (fm3-index                  vslf-index3)
		     (base                       vslf-base)
		     (frobber                    vslf-frobber)
		     (reverb-amount              vslf-reverb-amount)
		     (index-type                 vslf-index-type)
		     (degree                     vslf-degree)
		     (distance                   vslf-distance)
		     (denoise                    vslf-denoise)
		&allow-other-keys)
  (if (> (abs amplitude) 1.0) (error "amplitude = ~A?" amplitude))
  (if (< (abs frequency) 1.0) (error "frequency = ~A?" frequency))
  (let* ((beg (floor (* startime *srate*)))
	 (end (+ beg (floor (* dur *srate*))))
	 
	 (frq-scl (hz->radians frequency))
	 (modulate (not (zerop fm-index)))
	 (maxdev (* frq-scl fm-index))
	 (vln (not (eq index-type :cello)))
	 (easy-case (and (zerop noise-amount)
			 (eq fm1-env fm2-env)
			 (eq fm1-env fm3-env)
			 (zerop (- fm1-rat (floor fm1-rat)))
			 (zerop (- fm2-rat (floor fm2-rat)))
			 (zerop (- fm3-rat (floor fm3-rat)))))
	 ;; if the envelopes are all the same, and each ratio is an integer, we can use
	 ;; waveshaping to get the modulation very cheaply -- i.e. around 10 instructions 
	 ;; as opposed to 200 instructions used by 3 sine calcs, 3 envelopes,
	 ;; and 6 double-precision multiplies. (And it is extremely cheap to add more 
	 ;; moduators here because each is just a multiply-add at run time!)

	 (index1 (or fm1-index (min pi (* maxdev (/ (if vln 5.0 7.5) (log frequency))))))
	 (index2 (or fm2-index (min pi (* maxdev 3.0 (if vln 
							     (/ (- 8.5 (log frequency)) (+ 3.0 (/ frequency 1000)))
							   (/ 15.0 (sqrt frequency)))))))
	 (index3 (or fm3-index (min pi (* maxdev (/ (if vln 4.0 8.0) (sqrt frequency))))))

	 (coeffs (and easy-case modulate
		      (partials->polynomial
		       (list fm1-rat index1
			     fm2-rat index2
			     fm3-rat index3))))
	 (norm (or (and easy-case modulate 1.0) index1))
	 
	 (carrier (make-oscil :frequency frequency))
	 (fmosc1  (and modulate (make-oscil :frequency (* fm1-rat frequency))))
	 (fmosc2  (and modulate (or easy-case (make-oscil :frequency (* fm2-rat frequency)))))
	 (fmosc3  (and modulate (or easy-case (make-oscil :frequency (* fm3-rat frequency)))))
	 (ampf  (make-env :envelope (if denoise 
					(reduce-amplitude-quantization-noise amp-env dur amplitude)
				      amp-env)
			  :base base :duration dur
			  :scaler amplitude))
	 (indf1 (and modulate
		     (make-env :envelope fm1-env  :duration dur
			       :scaler norm)))
	 (indf2 (and modulate
		     (or easy-case
			 (make-env :envelope fm2-env  :duration dur
				   :scaler index2))))
	 (indf3 (and modulate
		     (or easy-case 
			 (make-env :envelope fm3-env  :duration dur
				   :scaler index3))))
	 (frqf (make-env :envelope gliss-env :duration dur
			 :scaler (* glissando-amount frq-scl)))
	 (pervib (make-triangle-wave :frequency periodic-vibrato-rate 
				     :amplitude (* periodic-vibrato-amplitude frq-scl)))
	 (ranvib (make-rand-interp :frequency random-vibrato-rate 
			     :amplitude (* random-vibrato-amplitude frq-scl)))
	 (fm-noi (if (and (/= 0.0 noise-amount)
			  (null frobber))
		     (make-rand :frequency noise-freq
				 :amplitude (* pi noise-amount))))
	 (frb-env (if (and (/= 0.0 noise-amount)
			   frobber)
		      (make-env :envelope (make-frobber-function startime (+ startime dur) frobber)
				:base 0 :duration dur
				:scaler (* two-pi noise-amount))))
	 (vib 0.0) 
	 (modulation 0.0)
	 (loc (make-locsig :degree degree :reverb reverb-amount :distance distance))
	 (fuzz 0.0))
    (run
     (loop for i from beg to end do
       (if (/= 0.0 noise-amount)
	   (if (null frobber)
	       (setf fuzz (rand fm-noi))
	     (setf fuzz (env frb-env))))
       (setf vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
       (if modulate
	   (if easy-case
	       (setf modulation
		 (* (env indf1) 
		    (polynomial coeffs (oscil fmosc1 vib))))
	     (setf modulation
	       (+ (* (env indf1) (oscil fmosc1 (+ (* fm1-rat vib) fuzz)))
		  (* (env indf2) (oscil fmosc2 (+ (* fm2-rat vib) fuzz)))
		  (* (env indf3) (oscil fmosc3 (+ (* fm3-rat vib) fuzz)))))))
       (locsig loc i
	       (+ (* .125 modulation)
		  (* (env ampf)
		     (oscil carrier (+ vib modulation)))))))))


;;; the "fuzz" term is not scaled to fit each modulator (this is the way the SAM version worked)


