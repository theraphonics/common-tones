(definstrument arith1 ()
  (let ((logs (make-double-array 40 :initial-element (double 1.0)))
	(lags (make-integer-array 5 :initial-contents (loop for i from 0 to 4 collect i)))
	(is (make-integer-array 20 :initial-contents (loop for i from 0 to 19 collect i)))
	(im (make-integer-array 20 :initial-contents (loop for i from 0 to 19 collect (- i))))
	(m26 -2.6) (m24 -2.4) (m4 -4) (p13 13.0) (p134 13.4) (p40 4.0)
	(i456 -456) (im1 -1) (i345 -345) (six 6) (seven 7) (p5 0.5) (p3 3.0) (im6 -6) (im8 -8) (pz 0.0) (p2 2.0)
	(five 5) (three 3) (two 2) (four 4) (one 1) (atan11 .7853982) (p15 .15) (zero 0) (p1 1.0))
    (setf (aref logs 2) (double 2.6))
    (setf (aref logs 3) (double 2.5))
    (setf (aref logs 4) (double 2.4))
    (setf (aref logs 5) (double 5.0))
    (setf (aref logs 6) (double -.125))
    (setf (aref logs 8) (double 8.0))
  (run
   (loop for i from zero to zero do
     (declare (type :integer one two three four five six seven im1) (type :float p15) (type :int* im))
     (do ((i 0 (1+ i)))
	 ((= i 20))
       (if (/= (aref im i) (- i)) (clm-print " im[~d]: ~d~%" i (aref im i)))
       (if (/= (aref is i) i) (clm-print " is[~d]: ~d~%" i (aref is i))))

     (if (zerop i456) (print "(zerop i456)?"))
     (if (not (zerop zero)) (print "(not (zerop zero))?"))
     (if (not (plusp three)) (print "(not (plusp three))?"))
     (if (not (minusp i456)) (print "(not (minusp i456))?"))
     (if (not (oddp im1)) (print "(not (oddp im1))?"))
     (if (oddp zero) (print "(oddp zero)?"))
     (if (not (evenp i456)) (print "(not (evenp i456))?"))
     (if (evenp i345) (print "(evenp i345)?"))
     (if (/= p3 three) (print "(/= p3 three)?"))
     (if (not (< (aref im 5) (aref im 4) (- two) zero four five)) (print "(not (< (aref im 5) (aref im 4) (- two) zero four five))?"))
     (if (not (> (aref is 8) (aref is (aref is 7)) six five four)) (print "(not (> (aref is 8) (aref is (aref is 7)) six five four))?"))
     (if (not (<= p3 three)) (print "(not (<= p3 three))?"))
     (if (not (<= three three)) (print "(not (<= three three))?"))
     (if (<= one three three two five) (print "(<= one three three two five)?"))
     (if (= one two three four five six (aref is 7)) (print "(= one two three four five six (aref is 7))?"))
     (if (not (/= one two three four five six (aref is 7))) (print "(not (/= one two three four five six (aref is 7)))?"))
     (if (>= (aref im 5) (aref im 4) (- (aref is 2)) zero four (aref is 5)) (print "(>= (aref im 5) (aref im 4) (- (aref is 2)) zero four (aref is 5))?"))
     (if (/= (max one three two (- seven)) three) (print "(/= (max one three two (- seven)) three)?"))
     (if (/= (- three zero three five im6) one) (print "(/= (- three zero three five im6) one)?"))
     (if (/= (* (aref is (aref is 7)) six five four three two one) 5040) (print "(/= (* (aref is (aref is 7)) six five four three two one) 5040)?"))
     (if (/= (* two (aref is 2) (* p5 four) (aref is 2)) (* p2 (aref is 8))) (print "(/= (* two (aref is 2) (* p5 four) (aref is 2)) (* p2 (aref is 8)))?"))
     (if (> (abs (- (/ im8) (aref logs 6))) .0001) (print "(> (abs (- (/ im8) (aref logs 6))) .0001)?"))
     (if (/= (/ four (aref is 2)) (aref is 2)) (print "(/= (/ four (aref is 2)) (aref is 2))?"))
     (if (> (abs (- (/ three four 5) p15)) .0001) (clm-print " abs case: = ~f~%" (/ three four 5)))
     (if (/= (1+ zero) one) (print "(/= (1+ zero) one)?"))
     (if (/= (1- (aref logs 5)) (* p2 2)) (print "(/= (1- (aref logs 5)) (* p2 2))?"))
     (if (/= (sqrt (aref is 9)) p3) (print "(/= (sqrt (aref is 9)) p3)?"))
     (if (/= (abs six) six) (print "(/= (abs six) six)?"))
     (if (/= (abs im6) six) (print "(/= (abs im6) six)?"))
     (if (/= (signum zero) zero) (print "(/= (signum zero) zero)?"))
     (if (/= (signum (aref im 4)) im1) (print "(/= (signum (aref im 4)) im1)?"))
     (if (/= (signum four) one) (print "(/= (signum four) one)?"))
     (if (> (abs (- (cos zero) p1)) .00001) (clm-print " cos zero: ~f~%" (cos zero)))
     (if (/= (asin zero) pz) (print "(/= (asin zero) pz)?"))
     (if (> (abs (- (asin p1) (/ pi (aref is 2)))) .0001) (clm-print " asin: ~f - ~f~%" (asin p1) (/ pi (aref is 2))))
     (if (> (abs (acos p1)) .0001) (clm-print " acos p1: ~f~%" (acos p1)))
     (if (> (abs (- (atan p1) (/ pi four))) .0001) (clm-print " atan p1: ~f - ~f~%" (atan p1) (/ pi four)))
     (if (/= (sinh zero) pz) (print "(/= (sinh zero) pz)?"))
     (if (> (abs (- (sinh (/ pi four)) 0.86867096)) .0001) (clm-print " sinh pi/4: ~f~%" (sinh (/ pi four))))
     (if (> (abs (- (asinh 0.8686709614860) (/ pi four))) .0001) (clm-print " asinh -> pi/4: ~f - ~f~%" (asinh 0.8686709614860) (/ pi four)))
     (if (/= (cosh zero) p1) (print "(/= (cosh zero) p1)?"))
     (if (/= (tanh (+ (aref is 10) (* 4 (aref is 10)))) p1) (print "(/= (tanh (+ (aref is 10) (* 4 (aref is 10)))) p1)?"))
     (if (> (abs (- (atanh .7615942) p1)) .0001) (print "(> (abs (- (atanh .7615942) p1)) .0001)?"))
     (if (> (abs (- (atan p1) atan11)) .0001) (print "(> (abs (- (atan p1) atan11)) .0001)?"))
     (if (> (abs (- (atan p1 p1) atan11)) .0001) (print "(> (abs (- (atan p1 p1) atan11)) .0001)?"))
     (if (/= (acosh one) zero) (print "(/= (acosh one) zero)?"))
     (if (> (abs (- (log (aref logs 8) p2) p3)) .0001) (clm-print " log aref logs 8: ~F != 3.0~%" (log 8.0 2.0)))
     (if (/= (float one) p1) (print "(/= (float one) p1)?"))
     (if (/= (float p5) p5) (print "(/= (float p5) p5)?"))
     (if (/= (floor (aref logs 2)) (aref is 2)) (print "(/= (floor (aref logs 2)) (aref is 2))?"))
     (if (/= (floor (aref logs 3)) (aref is 2)) (print "(/= (floor (aref logs 3)) (aref is 2))?"))
     (if (/= (floor -0.5) im1) (clm-print " floor -0.5 = ~d (-1)~%" (floor -.5)))
     (if (/= (floor (- (aref logs 4))) (aref im 3)) (print "(/= (floor (- (aref logs 4))) (aref im 3))?"))
     (if (/= (floor m26) (- three)) (print "(/= (floor m26) (- three))?"))
     (if (/= (aref im 13) -13) (clm-print " aref im 13: ~d~%" (aref im 13)))
     (if (/= (floor (aref is 13) m4) m4) (clm-print " aref is = ~d (-4)~%" (floor (aref is 13) m4)))
     (if (/= (floor (aref im 13) m4) three) (clm-print "(/= (floor (aref im 13) m4) three)?: ~d ~d ~d -> ~a~%" (aref im 13) m4 three (floor (aref im 13) m4)))
     (if (/= (floor (aref im 13) four) m4) (clm-print " floor aref im = ~d (-4)~%" (floor (aref im 13) four)))
     (if (/= (floor (aref is 13) four) three) (print "(/= (floor (aref is 13) four) three)?"))
     (if (/= (ceiling (aref logs 2)) three) (print "(/= (ceiling (aref logs 2)) three)?"))
     (if (/= (ceiling (aref logs 3)) three) (print "(/= (ceiling (aref logs 3)) three)?"))
     (if (/= (ceiling (aref logs 4)) three) (print "(/= (ceiling (aref logs 4)) three)?"))
     (if (/= (ceiling (- (aref logs 4))) (aref im 2)) (print "(/= (ceiling (- (aref logs 4))) (aref im 2))?"))
     (if (/= (ceiling m26) (aref im 2)) (print "(/= (ceiling m26) (aref im 2))?"))
     (if (/= (ceiling (aref im 13) four) (aref im 3)) (clm-print " ceiling aref im = ~d~%" (ceiling (aref im 13) four)))
     (if (/= (ceiling (aref is 13) m4) (aref im 3)) (clm-print " ceiling aref is = ~d~%" (ceiling (aref is 13) m4)))
     (if (/= (ceiling (aref im 13) m4) four) (clm-print " ceiling aref im = ~d~%" (ceiling (aref im 13) m4)))
     (if (/= (ceiling (aref is 13) four) four) (clm-print " ceiling aref is = ~d~%" (ceiling (aref is 13) four)))
     (if (/= (truncate (aref logs 2)) (aref is 2)) (print "(/= (truncate (aref logs 2)) (aref is 2))?"))
     (if (/= (truncate (aref logs 3)) (aref is 2)) (print "(/= (truncate (aref logs 3)) (aref is 2))?"))
     (if (/= (truncate (aref logs 4)) (aref is 2)) (print "(/= (truncate (aref logs 4)) (aref is 2))?"))
     (if (/= (truncate m24) (aref im 2)) (print "(/= (truncate m24) (aref im 2))?"))
     (if (/= (truncate m26) (- (aref is 2))) (print "(/= (truncate m26) (- (aref is 2)))?"))
     (if (/= (truncate (aref im 13) four) (aref im 3)) (clm-print " truncate aref im = ~d (-3)~%" (truncate (aref im 13) four)))
     (if (/= (truncate (aref is 13) m4) (aref im 3)) (clm-print " truncate aref is = ~d (-3)~%" (truncate (aref is 13) m4)))
     (if (/= (truncate (aref im 13) m4) three) (clm-print " truncate aref im m4 = ~d (3)~%" (truncate (aref im 13) m4)))
     (if (/= (truncate (aref is 13) four) three) (clm-print " truncate aref is four = ~d (3)~%" (truncate (aref is 13) four)))
     (if (/= (round (aref logs 2)) three) (print "(/= (round (aref logs 2)) three)?"))
     (if (/= (round (aref logs 3)) (aref is 2)) (print "(/= (round (aref logs 3)) (aref is 2))?"))
     (if (/= (round 3.5) four) (print "(/= (round 3.5) four)?"))
     (if (/= (round (aref logs 4)) (aref is 2)) (print "(/= (round (aref logs 4)) (aref is 2))?"))
     (if (/= (round m24) (aref im 2)) (print "(/= (round m24) (aref im 2))?"))
     (if (/= (round m26) (aref im 3)) (print "(/= (round m26) (aref im 3))?"))
     (if (/= (round (aref im 13) four) (aref im 3)) (print "(/= (round (aref im 13) four) (aref im 3))?"))
     (if (/= (round (aref im 13) m4) three) (print "(/= (round (aref im 13) m4) three)?"))
     (if (/= (round (aref is 13) four) three) (print "(/= (round (aref is 13) four) three)?"))
     (if (/= (round (aref is 13) m4) (aref im 3)) (print "(/= (round (aref is 13) m4) (aref im 3))?"))
     (if (/= (mod (aref is 13) four) one) (clm-print " mod aref is: ~D~%~%" (mod (aref is 13) four)))
     (if (/= (mod (aref im 13) four) three) (clm-print " aref im (mod -13 4)=~d~%~%" (mod (aref im 13) four)))
     (if (/= (- (aref im 3)) three) (print "(/= (- (aref im 3)) three)?"))
     (if (/= (mod (aref im 13) m4) im1) (clm-print " mod aref im 13 m4 ~D~%~%" (mod (aref im 13) m4)))
     (if (/= (mod (aref is 13) m4) (aref im 3)) (print "(/= (mod (aref is 13) m4) (aref im 3))?"))
     (if (> (abs (- (mod p134 one) .4)) .0001) (clm-print " mod p134 = ~f~%~%" (mod p134 one)))
     (if (> (abs (- (mod (- p134) one) .6)) .0001) (clm-print " mod -p134 = ~f~%" (mod (- p134) one)))
     (if (> (abs (- (mod p13 p40) p1)) .0001) (print "(> (abs (- (mod p13 p40) p1)) .0001)?"))
     (if (> (abs (- (mod p13 (- p40)) -3.0)) .0001) (clm-print " mod p13 = ~f~%" (mod p13 (- p40))))
     (if (> (abs (- (mod (- p13) (- p40)) -1.0)) .0001) (clm-print " mod -p13: ~F~%~%" (mod (- p13) (- p40))))
     (if (> (abs (- (mod (- p13) p40) p3)) .0001) (clm-print " -mod p13 = ~f~%" (mod (- p13) p40)))
     (if (/= (rem (aref is 13) four) one) (print "(/= (rem (aref is 13) four) one)?"))
     (if (/= (rem (aref im 13) four) im1) (print "(/= (rem (aref im 13) four) im1)?"))
     (if (/= (rem (aref is 13) m4) one) (print "(/= (rem (aref is 13) m4) one)?"))
     (if (/= (rem (aref im 13) m4) im1) (print "(/= (rem (aref im 13) m4) im1)?"))
     (if (> (abs (- (rem p134 one) .4)) .0001) (print "(> (abs (- (rem p134 one) .4)) .0001)?"))
     (if (> (abs (- (rem (- p134) one) -.4)) .0001) (print "(> (abs (- (rem (- p134) one) -.4)) .0001)?"))
     (if (/= (ash one three) 8) (print "(/= (ash one three) 8)?"))
     (if (/= (ash 11 four) 176) (print "(/= (ash 11 four) 176)?"))

     (if (/= (aref lags three) three) (clm-print " arerf lags: ~D != 18~%" (aref lags three)))
     (if (/= (aref logs 38) 1.0) (print "(/= (aref logs 38) 1.0)?"))
     (if (/= (array-total-size logs) 40) (print "(/= (array-total-size logs) 40)?"))
     (if (/= (array-total-size lags) 5) (print "(/= (array-total-size lags) 5)?"))
     (if (not (array-in-bounds-p logs 12)) (print "(not (array-in-bounds-p logs 12))?"))
     (if (array-in-bounds-p lags six) (print "(array-in-bounds-p lags six)?"))
     (if (/= (array-dimension lags 0) 5) (clm-print " arr dim lags 0: ~d~%" (array-dimension lags one)))
     (if (/= (array-rank lags) one) (print "(/= (array-rank lags) one)?"))
     (if (/= (array-rank logs) one) (print "(/= (array-rank logs) one)?"))

     (outa i zero))))
  )
