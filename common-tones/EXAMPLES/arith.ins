(definstrument arith ()
  (let ((logs (make-array 40 :element-type 'fixnum :initial-contents '(  0 0 0 1 
									 0 1 1 1 
									 0 1 1 0
									 1 0 0 1
									 1 1 1 0
									 1 0 0 0
									 0 1 0 0
									 0 0 1 0
									 1 1 0 1
									 1 0 1 1)))
	(lags (make-array '(5 5) :initial-contents (loop for i from 0 to 4 collect
						     (loop for j from 0 to 4 collect (+ j (* i 5))))))
	(legs (make-array '(5 3 4 2) :initial-element 32)))
    (setf (aref legs 1 1 1 1) 13)
  (run
   (loop for i from 0 to 0 do
     (if (zerop -456) (print " zerp -456?"))
     (if (not (zerop 0)) (print " not zerop 0?"))
     (if (not (plusp 3)) (print " not plusp 3?"))
     (if (not (minusp -456)) (print " not minusp -456?"))
     (if (not (oddp -1)) (print " not oddp -1?"))
     (if (oddp 0) (print " oddp 0?"))
     (if (not (evenp -456)) (print " not evenp -456?"))
     (if (evenp -345) (print "(evenp -345)?"))
     (if (/= 3.0 3) (print "(/= 3.0 3)?"))
     (if (not (< -5 -4 -2 0 4 5)) (print "(not (< -5 -4 -2 0 4 5))?"))
     (if (not (> 8 7 6 5 4)) (print "(not (> 8 7 6 5 4))?"))
     (if (not (<= 3.0 3)) (print "(not (<= 3.0 3))?"))
     (if (not (<= 3 3)) (print "(not (<= 3 3))?"))
     (if (<= 1 3 3 2 5) (print "(<= 1 3 3 2 5)?"))
     (if (= 1 2 3 4 5 6 7) (print "(= 1 2 3 4 5 6 7)?"))
     (if (not (/= 1 2 3 4 5 6 7)) (print "(not (/= 1 2 3 4 5 6 7))?"))
     (if (>= -5 -4 -2 0 4 5) (print "(>= -5 -4 -2 0 4 5)?"))
     (if (/= (max 1 3 2 -7) 3) (print "(/= (max 1 3 2 -7) 3)?"))
     (if (/= (- 3 0 3 5 -6) 1) (print "(/= (- 3 0 3 5 -6) 1)?"))
     (if (/= (* 7 6 5 4 3 2 1) 5040) (print "(/= (* 7 6 5 4 3 2 1) 5040)?"))
     (if (/= (* 2 2 2.0 2) 16.0) (print "(/= (* 2 2 2.0 2) 16.0)?"))
     (if (> (abs (- (/ -8) -.125)) .0001) (print "(> (abs (- (/ -8) -.125)) .0001)?"))
     (if (/= (/ 4 2) 2) (print "(/= (/ 4 2) 2)?"))
     (if (> (abs (- (/ 3 4 5) .15)) .0001) (clm-print " (/ 3 4 5) = ~f" (/ 3 4 5)))
     (if (/= (1+ 0) 1) (print "(/= (1+ 0) 1)?"))
     (if (/= (1- 5.0) 4.0) (print "(/= (1- 5.0) 4.0)?"))
     (if (/= (sqrt 9) 3.0) (print "(/= (sqrt 9) 3.0)?"))
     (if (/= (abs 6) 6) (print "(/= (abs 6) 6)?"))
     (if (/= (abs -6) 6) (print "(/= (abs -6) 6)?"))
     (if (/= (signum 0) 0) (print "(/= (signum 0) 0)?"))
     (if (/= (signum -4) -1) (print "(/= (signum -4) -1)?"))
     (if (/= (signum 4) 1) (print "(/= (signum 4) 1)?"))
     (if (/= (signum 0.0) 0.0) (print "(/= (signum 0.0) 0.0)?"))
     (if (/= (signum -4.0) -1.0) (print "(/= (signum -4.0) -1.0)?"))
     (if (/= (signum 4.0) 1.0) (print "(/= (signum 4.0) 1.0)?"))
     (if (> (abs (- (cos 0) 1.0)) .00001) (clm-print " (cos 0): ~f" (cos 0)))
     (if (/= (asin 0) 0.0) (print "(/= (asin 0) 0.0)?"))
     (if (> (abs (- (asin 1.0) (/ pi 2))) .0001) (clm-print " (asin 1.0) - (/ pi 2): ~f - ~f" (asin 1.0) (/ pi 2)))
     (if (> (abs (acos 1.0)) .0001) (clm-print " (acos 1.0): ~f" (acos 1.0)))
     (if (> (abs (- (atan 1.0) (/ pi 4))) .0001) (clm-print " (- (atan 1.0) (/ pi 4)): ~f - ~f" (atan 1.0) (/ pi 4)))
     (if (/= (sinh 0) 0.0) (print "(/= (sinh 0) 0.0)?"))
     (if (> (abs (- (sinh (/ pi 4)) 0.86867096)) .0001) (clm-print " (sinh (/ pi 4)): ~f" (sinh (/ pi 4))))
     (if (> (abs (- (asinh 0.8686709614860) (/ pi 4))) .0001) (clm-print " (asinh -> pi/4): ~f - ~f" (asinh 0.8686709614860) (/ pi 4)))
     (if (/= (cosh 0) 1.0) (print "(/= (cosh 0) 1.0)?"))
     (if (/= (tanh 50) 1.0) (print "(/= (tanh 50) 1.0)?"))
     (if (> (abs (- (atanh .7615942) 1.0)) .0001) (print "(> (abs (- (atanh .7615942) 1.0)) .0001)?"))
     (if (> (abs (- (atan 1.0) .7853982)) .0001) (print "(> (abs (- (atan 1.0) .7853982)) .0001)?"))
     (if (> (abs (- (atan 1.0 1.0) .7853982)) .0001) (print "(> (abs (- (atan 1.0 1.0) .7853982)) .0001)?"))
     (if (/= (acosh 1) 0) (print "(/= (acosh 1) 0)?"))
     (if (> (abs (- (log 8.0 2.0) 3.0)) .0001) (clm-print " log 8 base 2: ~F != 3.0" (log 8.0 2.0)))
     (if (/= (float 1) 1.0) (print "(/= (float 1) 1.0)?"))
     (if (/= (float 0.5) 0.5) (print "(/= (float 0.5) 0.5)?"))
     (if (/= (floor 2.6) 2) (print "(/= (floor 2.6) 2)?"))
     (if (/= (floor 2.5) 2) (print "(/= (floor 2.5) 2)?"))
     (if (/= (floor -0.5) -1) (clm-print " floor -.5 = ~d (-1)" (floor -.5)))
     (if (/= (floor -2.4) -3) (print "(/= (floor -2.4) -3)?"))
     (if (/= (floor -2.6) -3) (print "(/= (floor -2.6) -3)?"))
     (if (/= (floor 13 -4) -4) (clm-print " floor 13 -4 = ~d (-4)" (floor 13 -4)))
     (if (/= (floor -13 -4) 3) (print "(/= (floor -13 -4) 3)?"))
     (if (/= (floor -13 4) -4) (clm-print " floor -13 4 = ~d (-4)" (floor -13 4)))
     (if (/= (floor 13 4) 3) (print "(/= (floor 13 4) 3)?"))
     (if (/= (ceiling 2.6) 3) (print "(/= (ceiling 2.6) 3)?"))
     (if (/= (ceiling 2.5) 3) (print "(/= (ceiling 2.5) 3)?"))
     (if (/= (ceiling 2.4) 3) (print "(/= (ceiling 2.4) 3)?"))
     (if (/= (ceiling -2.4) -2) (print "(/= (ceiling -2.4) -2)?"))
     (if (/= (ceiling -2.6) -2) (print "(/= (ceiling -2.6) -2)?"))
     (if (/= (ceiling -13 4) -3) (clm-print " ceiling -13 4 = ~d" (ceiling -13 4)))
     (if (/= (ceiling 13 -4) -3) (clm-print " ceiling 13 -4 = ~d" (ceiling 13 -4)))
     (if (/= (ceiling -13 -4) 4) (clm-print " ceiling -13 -4 = ~d" (ceiling -13 -4)))
     (if (/= (ceiling 13 4) 4) (clm-print " ceiling 13 4 = ~d" (ceiling 13 4)))
     (if (/= (truncate 2.6) 2) (print "(/= (truncate 2.6) 2)?"))
     (if (/= (truncate 2.5) 2) (print "(/= (truncate 2.5) 2)?"))
     (if (/= (truncate 2.4) 2) (print "(/= (truncate 2.4) 2)?"))
     (if (/= (truncate -2.4) -2) (print "(/= (truncate -2.4) -2)?"))
     (if (/= (truncate -2.6) -2) (print "(/= (truncate -2.6) -2)?"))
     (if (/= (truncate -13 4) -3) (clm-print " truncate -13 4 = ~d (-3)" (truncate -13 4)))
     (if (/= (truncate 13 -4) -3) (clm-print " truncate 13 -4 = ~d (-3)" (truncate 13 -4)))
     (if (/= (truncate -13 -4) 3) (clm-print " truncate -13 -4 = ~d (3)" (truncate -13 -4)))
     (if (/= (truncate 13 4) 3) (clm-print " truncate 13 4 = ~d (3)" (truncate 13 4)))
     (if (/= (round 2.6) 3) (print "(/= (round 2.6) 3)?"))
     (if (/= (round 2.5) 2) (print "(/= (round 2.5) 2)?"))
     (if (/= (round 3.5) 4) (print "(/= (round 3.5) 4)?"))
     (if (/= (round 2.4) 2) (print "(/= (round 2.4) 2)?"))
     (if (/= (round -2.4) -2) (print "(/= (round -2.4) -2)?"))
     (if (/= (round -2.6) -3) (print "(/= (round -2.6) -3)?"))
     (if (/= (round -13 4) -3) (print "(/= (round -13 4) -3)?"))
     (if (/= (round -13 -4) 3) (print "(/= (round -13 -4) 3)?"))
     (if (/= (round 13 4) 3) (print "(/= (round 13 4) 3)?"))
     (if (/= (round 13 -4) -3) (print "(/= (round 13 -4) -3)?"))
     (if (/= (mod 13 4) 1) (print "(/= (mod 13 4) 1)?"))
     (if (/= (mod -13 4) 3) (clm-print " (mod -13 4)=~d" (mod -13 4)))
     (if (/= (- -3) 3) (print "(/= (- -3) 3)?"))
     (if (/= (mod -13 -4) -1) (print "(/= (mod -13 -4) -1)?"))
     (if (/= (mod 13 -4) -3) (print "(/= (mod 13 -4) -3)?"))
     (if (> (abs (- (mod 13.4 1) .4)) .0001) (clm-print " mod 13.4 1 = ~f" (mod 13.4 1)))
     (if (> (abs (- (mod -13.4 1) .6)) .0001) (clm-print " mod -13.4 1 = ~f" (mod -13.4 1)))
     (if (> (abs (- (mod 13.0 4.0) 1.0)) .0001) (print " mod 13.0 4.0"))
     (if (> (abs (- (mod 13.0 -4.0) -3.0)) .0001) (clm-print " mod 13.0 -4.0 = ~f" (mod 13.0 -4.0)))
     (if (> (abs (- (mod -13.0 -4.0) -1.0)) .0001) (print " mod -13.0 -4.0"))
     (if (> (abs (- (mod -13.0 4.0) 3.0)) .0001) (clm-print " mod -13.0 4.0 = ~f" (mod -13.0 4.0)))
     (if (/= (rem 13 4) 1) (print "(/= (rem 13 4) 1)?"))
     (if (/= (rem -13 4) -1) (print "(/= (rem -13 4) -1)?"))
     (if (/= (rem 13 -4) 1) (print "(/= (rem 13 -4) 1)?"))
     (if (/= (rem -13 -4) -1) (print "(/= (rem -13 -4) -1)?"))
     (if (> (abs (- (rem 13.4 1) .4)) .0001) (print "(> (abs (- (rem 13.4 1) .4)) .0001)?"))
     (if (> (abs (- (rem -13.4 1) -.4)) .0001) (print "(> (abs (- (rem -13.4 1) -.4)) .0001)?"))
     (if (/= (ash 1 3) 8) (print "(/= (ash 1 3) 8)?"))
     (if (/= (ash 11 4) 176) (print "(/= (ash 11 4) 176)?"))

     (if (/= (aref lags 3 3) 18) (clm-print " aref lags 3 3: ~D != 18" (aref lags 3 3)))
     (if (/= (aref logs 38) 1) (print "(/= (aref logs 38) 1)?"))
     (if (/= (array-total-size logs) 40) (print "(/= (array-total-size logs) 40)?"))
     (if (/= (array-total-size lags) 25) (print "(/= (array-total-size lags) 25)?"))
     (if (not (array-in-bounds-p logs 12)) (print "(not (array-in-bounds-p logs 12))?"))
     (if (array-in-bounds-p lags 3 6) (print "(array-in-bounds-p lags 3 6)?"))
     (if (/= (array-dimension lags 1) 5) (clm-print " array-dim lags 1: ~d" (array-dimension lags 1)))
     (if (/= (array-rank lags) 2) (print "(/= (array-rank lags) 2)?"))
     (if (/= (array-rank logs) 1) (print "(/= (array-rank logs) 1)?"))
     (if (adjustable-array-p lags) (print "(adjustable-array-p lags)?"))
     (if (/= (aref legs 1 1 1 1) 13) (clm-print " aref legs 1 1 1 1: ~F != 13" (aref legs 1 1 1 1)))
     (if (/= (array-dimension legs 2) 4) (print "(/= (array-dimension legs 2) 4)?"))

     (outa i 0))))
  )
