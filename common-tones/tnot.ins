(definstrument tnot ()
  (let ((x 0)
	(y 1)
	(k 2)
	(z nil)
	(m 0))
    (run
     (loop for i from 0 to 10 do
       (if (not (zerop x)) (print "yow"))
       (if (/= 0 x) (print "yowza"))
       (if (/= x 0) (print "oops1"))
       (if (zerop y) (print "zow"))
       (if (= 0 y) (print "zowza"))
       (if (= y 0) (print "zoops"))
       (if z (print "z oops"))
       (unless (null z) (print "z yow1"))
       (if (not (not z)) (print "z yowza1"))
       (when (null y) (print "5 bug"))
       (if z (print "7 bug"))
       (if (or (not (evenp k)) (evenp y) (not (oddp y)) (oddp k)) (print "4 bug"))
       (if (not (and (zerop x) (not (zerop y)) (not z))) (print "1 bug"))
       (if (or (minusp y) (and (not (zerop x)) (not z))) (print "2 bug"))
       (if (not (and (/= x 1) (/= y 0) (not z) (null z))) (print "3 bug"))
       (setf m (or 1 3))
       (if (setq) (print "setq bug"))
       (if (/= m 1) (print "4a bug"))
       (setf m (and 3 1))
       (if (/= m 1) (print "5a bug"))
       (setf m (or (and 3 1) (and 5 6)))
       (if (/= m 1) (print "6 bug"))
       (cond ((cond ((= y 0)) (t (= k 0))) (print "oops!")))
       (if (and (/= x y k) (> k y x) (>= k y x) (< x y k) (<= x y k) (= x (1- y) (- k 2)))
	   (if (and (= x) (< x) (> x) (<= x) (>= x) (/= x))
	       (if (and (= x (1- y)) (/= x y))
		   (princ "."))))
       (if (/= (prog1 (prog2 (setf x (centered-random .5)) 1) (setq x 0.0)) 1) (princ "nope!"))
       (if (/= (let ((x 3)) (prog1 x (setf x 32))) 3) (princ "noop"))
       (if (/= (let ((x 3)) (prog2 (setf x 32) x (setf x 3))) 32) (princ "nooop"))
       (outa i x)))))

#-(or openmcl sbcl) ; sbcl expands this into code calling values
(definstrument psetit ()
  (let ((a 1) (b 2) (c 3) (d 0))
    (run
     (loop for i from 0 to 0 do
       (declare (type integer a b c d))
       (psetq a b b a)
       (if (and (= a 2) (= b 1)) (princ ".") (clm-print "~A ~A ~A ~A~%" a b c d))
       (psetf a b b a)
       (if (and (= a 1) (= b 2)) (princ ".") (clm-print "~A ~A ~A ~A~%" a b c d))
       (setf d (shiftf a b c))
       (if (and (= d 1) (= a 2) (= b 3)) (princ ".") (clm-print "~A ~A ~A ~A~%" a b c d))
       (rotatef a b c d)
       (if (and (= a 3) (= b 3) (= c 1) (= d 2)) (princ ".") (clm-print "~A ~A ~A ~A~%" a b c d))
       (outa i .1)))))


#|

;;; -----------
(macroexpand '(psetq a b b a))
acl:
(LET ((#:DSP_806 B)) (SETQ B A A #:DSP_806) NIL) 
mcl:
(PROGN (LET ((#:G2601 B)) (SETQ B A A #:G2601)) NIL)
clisp:
(LET ((#:G732 B) (#:G733 A)) (SETQ A #:G732) (SETQ B #:G733) NIL)
sbcl:
(LET* ((#:NEW536 B) (#:NEW537 A)) (SETQ A #:NEW536) (SETQ B #:NEW537) NIL)


;;; -----------
(macroexpand '(psetf a b b a))
acl:
(LET (#:G1340 #:G1341) (SETQ) (MULTIPLE-VALUE-SETQ (#:G1340) B) (MULTIPLE-VALUE-SETQ (#:G1341) A) (SETQ A #:G1340) (SETQ B #:G1341) NIL)
mcl:
(PROGN (LET NIL (MULTIPLE-VALUE-BIND (#:G3273) B (PROGN (SETF B A) (SETQ A #:G3273)))) NIL)
clisp:
(LET* ((#:G734 B) (#:G735 A)) (SETQ B #:G735) (SETQ A #:G734) NIL)
sbcl:
(LET* ((#:NEW538 B) (#:NEW539 A)) (SETQ A #:NEW538) (SETQ B #:NEW539) NIL)

;;; -----------
(macroexpand '(shiftf a b c))
acl:
(LET* ((#:DSP_807 A) (#:DSP_808 B) (#:DSP_809 C)) (SETQ A #:DSP_808) (SETQ B #:DSP_809) #:DSP_807) 
mcl:
(MULTIPLE-VALUE-PROG1 A (MULTIPLE-VALUE-BIND (#:G2603) B (MULTIPLE-VALUE-BIND (#:G2602) C (PROGN (SETQ A #:G2603) (SETQ B #:G2602)))))
clisp:
(LET* ((#:G736 A) (#:G737 B) (#:G738 C)) (SETQ A #:G737) (SETQ B #:G738) #:G736)
sbcl:
(LET () (LET* ((#:OUT542 A) (#:NEW540 B) (#:NEW541 C)) (SETQ A #:NEW540) (SETQ B #:NEW541) (VALUES #:OUT542)))

;;; -----------
(macroexpand '(rotatef a b c))
acl:
(LET* ((#:DSP_812 A) (#:DSP_810 B) (#:DSP_811 C)) (SETQ A #:DSP_810) (SETQ B #:DSP_811) (SETQ C #:DSP_812) NIL) 
mcl:
(MULTIPLE-VALUE-CALL #'(LAMBDA (&OPTIONAL #:G2604 &REST #:IGNORE) (DECLARE (IGNORE #:IGNORE)) (MULTIPLE-VALUE-BIND (#:G2606) B (MULTIPLE-VALUE-BIND (#:G2605) C (PROGN (SETQ A #:G2606) (SETQ B #:G2605) (SETQ C #:G2604) NIL)))) A)
clisp:
(LET* ((#:G741 A) (#:G739 B) (#:G740 C)) (SETQ A #:G739) (SETQ B #:G740) (SETQ C #:G741) NIL)
sbcl:
(LET* () (MULTIPLE-VALUE-BIND (#:NEW543) B (MULTIPLE-VALUE-BIND (#:NEW544) C (MULTIPLE-VALUE-BIND (#:NEW545) A (SETQ A #:NEW543) (SETQ B #:NEW544) (SETQ C #:NEW545) NIL))))
|#
